`timescale 1ns/1ps
`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
//
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
//
// System configuration name is AXISoCQuadCoreModule_TopLevel_programmer_transmitterFIFO, clock frequency is 1Hz, Embedded
// FSM summary
// -- Packages
module AXISoCQuadCoreModule_TopLevel_programmer_transmitterFIFO
(
	// [BEGIN USER PORTS]
	// [END USER PORTS]
	input wire BoardSignals_Clock,
	input wire BoardSignals_Reset,
	input wire BoardSignals_Running,
	input wire BoardSignals_Starting,
	input wire BoardSignals_Started,
	input wire iRE,
	input wire [7:0] iWData,
	input wire iWE,
	output wire oIsEmpty,
	output wire oIsFull,
	output wire oRACK,
	output wire [7:0] oRData,
	output wire [7:0] oRRawData,
	output wire oRValid,
	output wire oWACK
);
	// [BEGIN USER SIGNALS]
	// [END USER SIGNALS]
	localparam HiSignal = 1'b1;
	localparam LoSignal = 1'b0;
	wire Zero = 1'b0;
	wire One = 1'b1;
	wire true = 1'b1;
	wire false = 1'b0;
	wire signed [4: 0] addrBits = 5'b01001;
	wire [3: 0] defaultValue = 4'b0000;
	wire signed [9: 0] depth = 10'b0100000000;
	wire signed [4: 0] width = 5'b01000;
	wire FIFOModule_L89F64T65_Expr = 1'b1;
	wire FIFOModule_L85F64T65_Expr = 1'b1;
	wire Inputs_iRE;
	wire [7: 0] Inputs_iWData;
	wire Inputs_iWE;
	reg NextState_isEmpty;
	reg NextState_isFull;
	reg NextState_isWrapAround;
	reg NextState_rACK;
	reg [8: 0] NextState_rAddr;
	reg NextState_rValid;
	reg NextState_wACK;
	reg [8: 0] NextState_wAddr;
	wire isEmptyNext;
	wire isFullNext;
	wire isWrapAroundNext;
	wire [7: 0] rAddr;
	wire [8: 0] rAddrNext;
	wire re;
	wire [7: 0] wAddr;
	wire [8: 0] wAddrNext;
	wire we;
	wire [7: 0] FIFOModule_L67F38T64_Index;
	wire [7: 0] FIFOModule_L67F68T94_Index;
	wire FIFOModule_L68F44T67_Index;
	wire FIFOModule_L68F71T94_Index;
	wire [8: 0] FIFOModule_L89F49T83_Index;
	wire [8: 0] FIFOModule_L89F44T97_WhenTrue;
	wire [8: 0] FIFOModule_L89F44T97_WhenFalse;
	wire [8: 0] FIFOModule_L89F44T97_Ternary;
	wire [8: 0] FIFOModule_L85F49T83_Index;
	wire [8: 0] FIFOModule_L85F44T97_WhenTrue;
	wire [8: 0] FIFOModule_L85F44T97_WhenFalse;
	wire [8: 0] FIFOModule_L85F44T97_Ternary;
	wire [7: 0] FIFOModule_L73F38T77_WhenTrue;
	wire [7: 0] FIFOModule_L73F38T77_WhenFalse;
	wire [7: 0] FIFOModule_L73F38T77_Ternary;
	reg State_isEmpty = 1'b0;
	wire State_isEmptyDefault = 1'b1;
	reg State_isFull = 1'b0;
	wire State_isFullDefault = 1'b0;
	reg State_isWrapAround = 1'b0;
	wire State_isWrapAroundDefault = 1'b0;
	reg State_rACK = 1'b0;
	wire State_rACKDefault = 1'b0;
	reg [8: 0] State_rAddr = 9'b000000000;
	wire [8: 0] State_rAddrDefault = 9'b000000000;
	reg [7: 0] State_rData;
	reg State_rValid = 1'b0;
	wire State_rValidDefault = 1'b0;
	reg State_wACK = 1'b0;
	wire State_wACKDefault = 1'b0;
	reg [8: 0] State_wAddr = 9'b000000000;
	wire [8: 0] State_wAddrDefault = 9'b000000000;
	wire FIFOModule_L67F38T114_Expr;
	wire FIFOModule_L67F38T114_Expr_1;
	wire FIFOModule_L67F38T114_Expr_2;
	wire FIFOModule_L88F20T48_Expr;
	wire FIFOModule_L88F20T48_Expr_1;
	wire FIFOModule_L88F20T48_Expr_2;
	wire FIFOModule_L88F34T48_Expr;
	wire FIFOModule_L88F34T48_Expr_1;
	wire FIFOModule_L84F20T47_Expr;
	wire FIFOModule_L84F20T47_Expr_1;
	wire FIFOModule_L84F20T47_Expr_2;
	wire FIFOModule_L84F34T47_Expr;
	wire FIFOModule_L84F34T47_Expr_1;
	wire FIFOModule_L92F9L112T10_FIFOModule_L104F32T46_Expr;
	wire FIFOModule_L92F9L112T10_FIFOModule_L104F32T46_Expr_1;
	wire [10: 0] FIFOModule_L89F50T65_Expr;
	wire signed [10: 0] FIFOModule_L89F50T65_Expr_1;
	wire signed [10: 0] FIFOModule_L89F50T65_Expr_2;
	wire [10: 0] FIFOModule_L85F50T65_Expr;
	wire signed [10: 0] FIFOModule_L85F50T65_Expr_1;
	wire signed [10: 0] FIFOModule_L85F50T65_Expr_2;
	wire FIFOModule_L66F39T61_Expr;
	wire signed [9: 0] FIFOModule_L66F39T61_ExprLhs;
	wire signed [9: 0] FIFOModule_L66F39T61_ExprRhs;
	wire FIFOModule_L67F38T94_Expr;
	wire signed [8: 0] FIFOModule_L67F38T94_ExprLhs;
	wire signed [8: 0] FIFOModule_L67F38T94_ExprRhs;
	wire FIFOModule_L68F44T94_Expr;
	wire FIFOModule_L68F44T94_ExprLhs;
	wire FIFOModule_L68F44T94_ExprRhs;
	integer State_buffer_Iterator;
	reg [7 : 0] State_buffer [0 : 255];
	initial
	begin : Init_State_buffer
		for (State_buffer_Iterator = 0; State_buffer_Iterator < 256; State_buffer_Iterator = State_buffer_Iterator + 1)
			State_buffer[State_buffer_Iterator] = 0;
	end
	// inferred simple dual port RAM with read-first behaviour
	always @ (posedge BoardSignals_Clock)
	begin
		if (we)
		begin
			State_buffer[wAddr] <= Inputs_iWData;
		end
		State_rData <= State_buffer[rAddr];
	end
	always @ (posedge BoardSignals_Clock)
	begin
		if ((BoardSignals_Reset == 1))
		begin
			State_isEmpty <= State_isEmptyDefault;
			State_isFull <= State_isFullDefault;
			State_isWrapAround <= State_isWrapAroundDefault;
			State_rACK <= State_rACKDefault;
			State_rAddr <= State_rAddrDefault;
			State_rValid <= State_rValidDefault;
			State_wACK <= State_wACKDefault;
			State_wAddr <= State_wAddrDefault;
		end
		else
		begin
			State_isEmpty <= NextState_isEmpty;
			State_isFull <= NextState_isFull;
			State_isWrapAround <= NextState_isWrapAround;
			State_rACK <= NextState_rACK;
			State_rAddr <= NextState_rAddr;
			State_rValid <= NextState_rValid;
			State_wACK <= NextState_wACK;
			State_wAddr <= NextState_wAddr;
		end
	end
	assign FIFOModule_L66F39T61_Expr = FIFOModule_L66F39T61_ExprLhs == FIFOModule_L66F39T61_ExprRhs ? 1'b1 : 1'b0;
	assign FIFOModule_L67F38T94_Expr = FIFOModule_L67F38T94_ExprLhs == FIFOModule_L67F38T94_ExprRhs ? 1'b1 : 1'b0;
	assign FIFOModule_L68F44T94_Expr = FIFOModule_L68F44T94_ExprLhs != FIFOModule_L68F44T94_ExprRhs ? 1'b1 : 1'b0;
	assign FIFOModule_L67F38T114_Expr = FIFOModule_L67F38T114_Expr_1 & FIFOModule_L67F38T114_Expr_2;
	assign FIFOModule_L88F20T48_Expr = FIFOModule_L88F20T48_Expr_1 & FIFOModule_L88F20T48_Expr_2;
	assign FIFOModule_L88F34T48_Expr = ~FIFOModule_L88F34T48_Expr_1;
	assign FIFOModule_L84F20T47_Expr = FIFOModule_L84F20T47_Expr_1 & FIFOModule_L84F20T47_Expr_2;
	assign FIFOModule_L84F34T47_Expr = ~FIFOModule_L84F34T47_Expr_1;
	assign FIFOModule_L92F9L112T10_FIFOModule_L104F32T46_Expr = ~FIFOModule_L92F9L112T10_FIFOModule_L104F32T46_Expr_1;
	assign FIFOModule_L89F50T65_Expr = FIFOModule_L89F50T65_Expr_1 + FIFOModule_L89F50T65_Expr_2;
	assign FIFOModule_L85F50T65_Expr = FIFOModule_L85F50T65_Expr_1 + FIFOModule_L85F50T65_Expr_2;
	assign FIFOModule_L89F44T97_Ternary = (re ? FIFOModule_L89F44T97_WhenTrue : FIFOModule_L89F44T97_WhenFalse);
	assign FIFOModule_L85F44T97_Ternary = (we ? FIFOModule_L85F44T97_WhenTrue : FIFOModule_L85F44T97_WhenFalse);
	assign FIFOModule_L73F38T77_Ternary = (State_rACK ? FIFOModule_L73F38T77_WhenTrue : FIFOModule_L73F38T77_WhenFalse);
	always @ (*)
	begin
		NextState_isEmpty = State_isEmpty;
		NextState_isFull = State_isFull;
		NextState_isWrapAround = State_isWrapAround;
		NextState_rACK = State_rACK;
		NextState_rAddr = State_rAddr;
		NextState_rValid = State_rValid;
		NextState_wACK = State_wACK;
		NextState_wAddr = State_wAddr;
		NextState_wAddr = wAddrNext;
		NextState_rAddr = rAddrNext;
		NextState_rValid = FIFOModule_L92F9L112T10_FIFOModule_L104F32T46_Expr;
		NextState_rACK = re;
		NextState_isEmpty = isEmptyNext;
		NextState_isFull = isFullNext;
		NextState_isWrapAround = isWrapAroundNext;
		NextState_wACK = we;
	end
	assign FIFOModule_L66F39T61_ExprLhs = {
		1'b0,
		wAddrNext
	}
	;
	assign FIFOModule_L66F39T61_ExprRhs = {
		1'b0,
		rAddrNext
	}
	;
	assign FIFOModule_L67F38T94_ExprLhs = {
		1'b0,
		FIFOModule_L67F38T64_Index
	}
	;
	assign FIFOModule_L67F38T94_ExprRhs = {
		1'b0,
		FIFOModule_L67F68T94_Index
	}
	;
	assign FIFOModule_L68F44T94_ExprLhs = FIFOModule_L68F44T67_Index;
	assign FIFOModule_L68F44T94_ExprRhs = FIFOModule_L68F71T94_Index;
	assign FIFOModule_L67F38T114_Expr_1 = FIFOModule_L67F38T94_Expr;
	assign FIFOModule_L67F38T114_Expr_2 = isWrapAroundNext;
	assign FIFOModule_L88F20T48_Expr_1 = Inputs_iRE;
	assign FIFOModule_L88F20T48_Expr_2 = FIFOModule_L88F34T48_Expr;
	assign FIFOModule_L88F34T48_Expr_1 = State_isEmpty;
	assign FIFOModule_L84F20T47_Expr_1 = Inputs_iWE;
	assign FIFOModule_L84F20T47_Expr_2 = FIFOModule_L84F34T47_Expr;
	assign FIFOModule_L84F34T47_Expr_1 = State_isFull;
	assign FIFOModule_L92F9L112T10_FIFOModule_L104F32T46_Expr_1 = State_isEmpty;
	assign FIFOModule_L89F50T65_Expr_1 = {
		{2{1'b0}},
		State_rAddr
	}
	;
	assign FIFOModule_L89F50T65_Expr_2 = {
		{10{1'b0}},
		FIFOModule_L89F64T65_Expr
	}
	;
	assign FIFOModule_L85F50T65_Expr_1 = {
		{2{1'b0}},
		State_wAddr
	}
	;
	assign FIFOModule_L85F50T65_Expr_2 = {
		{10{1'b0}},
		FIFOModule_L85F64T65_Expr
	}
	;
	assign Inputs_iRE = iRE;
	assign Inputs_iWData = iWData;
	assign Inputs_iWE = iWE;
	assign isEmptyNext = FIFOModule_L66F39T61_Expr;
	assign FIFOModule_L67F38T64_Index = wAddrNext[7:0];
	assign FIFOModule_L67F68T94_Index = rAddrNext[7:0];
	assign isFullNext = FIFOModule_L67F38T114_Expr;
	assign FIFOModule_L68F44T67_Index = wAddrNext[8];
	assign FIFOModule_L68F71T94_Index = rAddrNext[8];
	assign isWrapAroundNext = FIFOModule_L68F44T94_Expr;
	assign rAddr = State_rAddr[7:0];
	assign FIFOModule_L89F49T83_Index = FIFOModule_L89F50T65_Expr[8:0];
	assign FIFOModule_L89F44T97_WhenTrue = FIFOModule_L89F49T83_Index;
	assign FIFOModule_L89F44T97_WhenFalse = State_rAddr;
	assign rAddrNext = FIFOModule_L89F44T97_Ternary;
	assign re = FIFOModule_L88F20T48_Expr;
	assign wAddr = State_wAddr[7:0];
	assign FIFOModule_L85F49T83_Index = FIFOModule_L85F50T65_Expr[8:0];
	assign FIFOModule_L85F44T97_WhenTrue = FIFOModule_L85F49T83_Index;
	assign FIFOModule_L85F44T97_WhenFalse = State_wAddr;
	assign wAddrNext = FIFOModule_L85F44T97_Ternary;
	assign we = FIFOModule_L84F20T47_Expr;
	assign oIsEmpty = State_isEmpty;
	assign oIsFull = State_isFull;
	assign oRACK = State_rACK;
	assign FIFOModule_L73F38T77_WhenTrue = State_rData;
	assign FIFOModule_L73F38T77_WhenFalse = {
		{4{1'b0}},
		defaultValue
	}
	;
	assign oRData = FIFOModule_L73F38T77_Ternary;
	assign oRRawData = State_rData;
	assign oRValid = State_rValid;
	assign oWACK = State_wACK;
	// [BEGIN USER ARCHITECTURE]
	// [END USER ARCHITECTURE]
endmodule
